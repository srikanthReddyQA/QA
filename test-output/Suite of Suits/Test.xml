<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="4" hostname="Srikanth-PC" failures="0" tests="3" name="Test" time="0.681" errors="0" timestamp="28 Jul 2018 07:38:03 GMT">
  <testcase classname="sri.lib.Base" name="@BeforeMethod beforeMethod" time="0.666">
    <failure type="java.lang.IllegalStateException" message="The driver executable does not exist: E:\Resources\chromedriver.exe">
      <![CDATA[java.lang.IllegalStateException: The driver executable does not exist: E:\Resources\chromedriver.exeat com.google.common.base.Preconditions.checkState(Preconditions.java:199)at org.openqa.selenium.remote.service.DriverService.checkExecutable(DriverService.java:121)at org.openqa.selenium.remote.service.DriverService.findExecutable(DriverService.java:116)at org.openqa.selenium.chrome.ChromeDriverService.access$000(ChromeDriverService.java:32)at org.openqa.selenium.chrome.ChromeDriverService$Builder.findDefaultExecutable(ChromeDriverService.java:137)at org.openqa.selenium.remote.service.DriverService$Builder.build(DriverService.java:296)at org.openqa.selenium.chrome.ChromeDriverService.createDefaultService(ChromeDriverService.java:88)at org.openqa.selenium.chrome.ChromeDriver.<init>(ChromeDriver.java:116)at sri.lib.Util.Lanchbrowser(Util.java:105)at sri.lib.Base.beforeMethod(Base.java:93)at sri.writeXML.Writexml.runXML(Writexml.java:129)... Removed 51 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="sri.lib.Base" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="sri.lib.Base" name="@BeforeClass beforeClass" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeClass beforeClass -->
  <testcase classname="sri.lib.Base" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="sri.lib.Base" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="sri.lib.Base" name="@BeforeClass beforeClass" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeClass beforeClass -->
  <testcase classname="sri.lib.Base" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="sri.lib.Base" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="sri.srikanth.Login_App" name="Login" time="0.0">
    <skipped/>
  </testcase> <!-- Login -->
  <testcase classname="sri.srikanth.Home" name="verifyHomeScreen" time="0.0">
    <skipped/>
  </testcase> <!-- verifyHomeScreen -->
  <testcase classname="sri.srikanth.Buy" name="buy" time="0.0">
    <skipped/>
  </testcase> <!-- buy -->
  <testcase classname="sri.lib.Base" name="@AfterSuite afterSuite" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite afterSuite -->
  <testcase classname="sri.lib.Base" name="@AfterSuite afterSuite" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite afterSuite -->
  <testcase classname="sri.lib.Base" name="@BeforeSuite beforeSuite" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite beforeSuite -->
  <testcase classname="sri.lib.Base" name="@BeforeSuite beforeSuite" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite beforeSuite -->
</testsuite> <!-- Test -->
